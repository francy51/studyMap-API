#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('studymap:server');
var http = require('http');
// var mail = require("../workers/emailWorker")
const { fork } = require('child_process');

const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

//Array of all servers
let servers = [];
//The mail worker
let mailWorker;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);
  
  console.log(`Number of CPUS : ${numCPUs}`)

  // Fork web servers.
  // All cluster code after this
  for (let i = 0; i < numCPUs; i++) {
    servers.push(cluster.fork());
  }
  
  cluster.on('exit', (worker, code, signal) => {
    console.log(`server ${worker.process.pid} died`);
    //TODO: Once a web server dies we have to start another
  });

  cluster.on('message', (worker, msg) => {
    console.log(`server ${worker.process.pid} sent message ${msg}`);
    if(msg.cmd == "sendEmail"){
      mailWorker.send({msg : msg.msg , cmd:'mail'})
    }
    worker.send("recieved");
  })

  //End cluster code

  //Starts the mail worker here
  //All the mail worker code after this
  mailWorker = fork("./workers/emailWorker", [], (error, stdout, stderr) => {
    if (error) {
      throw error;
    }
    console.log(stdout);
  });

  mailWorker.on('message', (msg) => {
    console.log('Got Message from mail worker', msg);
    mailWorker.send("recieved");
  });

  // end mail worker code

}
else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  process.on('message', (msg) => {
    console.log(`server ${process.pid} recieved message ${msg}`)
  });

  console.log(`server ${process.pid} started`);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
